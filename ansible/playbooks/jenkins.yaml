---
- hosts: ci0
  gather_facts: no
  vars_files:
  - vars.yaml
  vars:
  - dir: "{{ jenkins['dir'] }}/certs"
  - cn: "{{ jenkins['domain'] }}"
  - dns: "{{ jenkins['domain'] }}"
  tasks:
  - name: Generate cert for jenkins
    ansible.builtin.import_tasks: cert.yaml

- hosts: ci0
  gather_facts: no
  vars_files:
  - vars.yaml
  vars:
  - dir: "{{ jenkins['dir'] }}"
  tasks:
  - name: Make sure the dirs exist
    ansible.builtin.file:
      path: "{{ item }}"
      state: directory
    loop:
    - "{{ dir }}/jenkins/data"
    - "{{ dir }}/jenkins/docker-certs"
    - "{{ dir }}/nginx/certs"
    - "{{ dir }}/nginx/tmp"

  - name: Copy cert into the jenkins proxy dir
    ansible.builtin.copy:
      remote_src: yes
      src: "{{ item }}"
      dest: "{{ dir }}/nginx/certs/"
    loop:
    - "{{ dir }}/certs/cert.crt"
    - "{{ dir }}/certs/cert.key"

  - name: Make nginx.conf
    ansible.builtin.blockinfile:
      path: "{{ dir }}/nginx/nginx.conf"
      create: yes
      block: |
        user              nginx;
        worker_processes  auto;
        error_log         /var/log/nginx/error.log notice;
        pid               /tmp/nginx.pid;

        events {
          worker_connections  1024;
        }

        http {
          client_body_temp_path  /tmp/client_temp;
          proxy_temp_path        /tmp/proxy_temp_path;
          fastcgi_temp_path      /tmp/fastcgi_temp;
          uwsgi_temp_path        /tmp/uwsgi_temp;
          scgi_temp_path         /tmp/scgi_temp;

          upstream jenkins_backend {
            server  jenkins:8080;
          }   

          server {
            listen               {{ jenkins['port'] }} ssl;
            keepalive_timeout    70;
            ssl_session_cache    shared:SSL:10m;
            ssl_session_timeout  10m;
            ssl_certificate      /etc/nginx/certs/cert.crt;
            ssl_certificate_key  /etc/nginx/certs/cert.key;
            ssl_protocols        TLSv1.2 TLSv1.3;
            ssl_ciphers          TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384; # Reference: https://wiki.mozilla.org/Security/Server_Side_TLS
 
            location / { 
              proxy_pass        http://jenkins_backend;
              proxy_set_header  Host $host;
              proxy_set_header  X-Real-IP $remote_addr;
              proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header  X-Forwarded-Proto $scheme;
              proxy_redirect    ~(https?://{{ jenkins['domain'] }})(/.*)$ $1:$server_port$2; # Add port number in redirect location for local access
            }
          }   
        }

  - name: Make jenkins docker compose file
    ansible.builtin.blockinfile:
      path: "{{ dir }}/docker-compose.yaml"
      create: yes
      block: |
        version: "3"
        networks:
          jenkins_net:
            driver: bridge
        volumes:
          jenkins_data:
            driver: local
            driver_opts:
              type: none
              o: bind
              device: {{ dir }}/jenkins/data
          jenkins_certs:
            driver: local
            driver_opts:
              type: none
              o: bind
              device: {{ dir }}/jenkins/docker-certs
        services:
          proxy:
            container_name: jenkins_proxy
            image: nginx:{{ jenkins['nginx_ver'] }}
            restart: always
            networks:
            - jenkins_net
            volumes:
            - {{ dir }}/nginx/nginx.conf:/etc/nginx/nginx.conf
            - {{ dir }}/nginx/certs:/etc/nginx/certs
            - {{ dir }}/nginx/tmp:/tmp
            ports:
            - {{ jenkins['port'] }}:{{ jenkins['port'] }}
            depends_on:
            - jenkins
          jenkins:
            container_name: jenkins
            image: jenkins/jenkins:{{ jenkins['ver'] }}
            restart: always
            environment:
            - DOCKER_HOST=tcp://docker:2376
            - DOCKER_CERT_PATH=/certs/client
            - DOCKER_TLS_VERIFY=1
            - PLUGIN_DIR=/var/jenkins_home/plugins
            networks:
            - jenkins_net
            volumes:
            - jenkins_data:/var/jenkins_home
            - jenkins_certs:/certs/client:ro
            depends_on:
            - docker
          docker:
            container_name: jenkins_docker
            image: docker:{{ jenkins['docker_ver'] }}
            privileged: true
            restart: always
            environment:
            - DOCKER_TLS_CERTDIR=/certs
            networks:
            - jenkins_net
            volumes:
            - jenkins_data:/var/jenkins_home
            - jenkins_certs:/certs/client
            command: --storage-driver=overlay2

  - ansible.builtin.package_facts:
      manager: auto

  - name: Install jq to parse json
    become: yes
    ansible.builtin.apt:
      update_cache: yes
      pkg:
      - jq
    when: "'jq' not in ansible_facts.packages"

  - name: Check jenkins
    ansible.builtin.shell: docker compose -f {{ dir }}/docker-compose.yaml ps --format json | jq length
    register: jenkins_num

  - name: Shut down jenkins if it's not running
    ansible.builtin.shell: docker compose -f {{ dir }}/docker-compose.yaml down
    when: jenkins_num['stdout'] != "3"

  - name: Run jenkins
    ansible.builtin.shell: docker compose -f {{ dir }}/docker-compose.yaml up -d
    when: jenkins_num['stdout'] != "3"

- hosts: dns0
  gather_facts: no
  vars_files:
  - vars.yaml
  tasks:
  - name: Append jenkins addr to the coredns hosts file
    ansible.builtin.shell: |
      grep -E "([0-9]{1,3}.){3}[0-9]{1,3}[ $(echo -e '\t')]+{{ jenkins['domain'] }}" {{ coredns['hosts'] }}
      if [ $? != 0 ]; then
        echo {{ hostvars['ci0']['ansible_host'] }} {{ jenkins['domain'] }} >> {{ coredns['hosts'] }}
      fi
      grep -E "([0-9]{1,3}.){3}[0-9]{1,3}[ $(echo -e '\t')]+{{ jenkins['external'] }}" {{ coredns['hosts'] }}
      if [ $? != 0 ]; then
        echo {{ hostvars['proxy0']['ansible_host'] }} {{ jenkins['external'] }} >> {{ coredns['hosts'] }}
      fi

- name: Connect jenkins ci server to envoy proxy
  ansible.builtin.import_playbook: connect-proxy.yaml
  vars:
    domain: "{{ jenkins['domain'] }}"
    portnum: "{{ jenkins['port'] }}"
    external: "{{ jenkins['external'] }}"

