---
- hosts: ci0
  gather_facts: no
  vars_files:
  - vars.yaml
  vars:
  - dir: "{{ jenkins['dir'] }}"
  tasks:
  - name: Mark jenkins is cert state, so this will cause reconfiguration
    ansible.builtin.shell: |
      if [ "$(cat {{ dir }}/jenkins/data/state)" = "ready" ]; then
        echo "cert" > {{ dir }}/jenkins/data/state
      fi

- name: Install jenkins plugins
  ansible.builtin.import_playbook: jenkins-plugins.yaml

- hosts: ci0
  gather_facts: no
  vars_files:
  - vars.yaml
  vars:
  - dir: "{{ jenkins['dir'] }}"
  - token: "{{ lookup('file', '.keep/jenkins_token') }}"
  tasks:
  - name: Make sure the dirs exist
    ansible.builtin.file:
      path: "{{ item }}"
      state: directory
    loop:
    - "{{ dir }}/jenkins/data/casc_configs/init"
    - "{{ dir }}/jenkins/data/workspace/seed"

  - name: Make initial credentials
    ansible.builtin.blockinfile:
      path: "{{ dir }}/jenkins/data/casc_configs/init/credentials.yaml"
      create: yes
      block: |
        credentials:
          system:
            domainCredentials:
            - domain:
                name: "{{ gitea['external'] }}"
                description: "gitea domain"
                specifications:
                - hostnameSpecification:
                    includes: "{{ gitea['external'] }}"
              credentials:
              - giteaAccessToken:
                  scope: GLOBAL
                  token: {{ token }}
                  id: gitea-credentials
                  description: "The access authority about Gitea server as jenkins user" 

  - name: Make initial system settings
    ansible.builtin.blockinfile:
      path: "{{ dir }}/jenkins/data/casc_configs/init/unclassified.yaml"
      create: yes
      block: |
        unclassified:
          giteaServers:
            servers:
            - displayName: "gitea-server"
              serverUrl: "https://{{ gitea['external'] }}" 
              manageHooks: true
              credentialsId: "gitea-credentials"

  - name: Make initial security settings
    ansible.builtin.blockinfile:
      path: "{{ dir }}/jenkins/data/casc_configs/init/security.yaml"
      create: yes
      block: |
        security:
          # It will be enabled after initilization
          globalJobDslSecurityConfiguration:
            useScriptSecurity: false

  - vars:
      title: "Wait for jenkins becomes ready"
      path: "/"
      code: 200
    ansible.builtin.import_tasks: wait-jenkins.yaml

  - name: Restart jenkins to adapt settings
    ansible.builtin.shell: docker compose -f {{ dir }}/docker-compose.yaml restart

  - vars:
      title: "Wait for jenkins becomes ready"
      path: "/"
      code: 200
    ansible.builtin.import_tasks: wait-jenkins.yaml

  - name: Check jenkins cli tool
    ansible.builtin.stat:
      path: "{{ dir }}/jenkins/data/jenkins-cli.jar"
    register: stat_cli

  - name: Download jenkins cli tool
    ansible.builtin.shell: |
      find {{ dir }}/jenkins/data/war/WEB-INF/lib/ -name cli-*.jar -print0 | \
      xargs -0 -n 1 -I {} cp {} {{ dir }}/jenkins/data/jenkins-cli.jar
    when: not stat_cli['stat']['exists']

  - name: Make seed job configuration file
    ansible.builtin.copy:
      dest: "{{ dir }}/jenkins/data/workspace/seed/config.xml"
      content: |
        <?xml version='1.1' encoding='UTF-8'?>
        <project>
          <actions/>
          <description></description>
          <keepDependencies>false</keepDependencies>
          <properties/>
          <scm class="hudson.scm.NullSCM"/>
          <canRoam>true</canRoam>
          <disabled>false</disabled>
          <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
          <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
          <authToken>init-token</authToken>
          <triggers/>
          <concurrentBuild>false</concurrentBuild>
          <builders>
            <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.81">
              <targets>*.groovy</targets>
              <usingScriptText>false</usingScriptText>
              <sandbox>false</sandbox>
              <ignoreExisting>false</ignoreExisting>
              <ignoreMissingFiles>false</ignoreMissingFiles>
              <failOnMissingPlugin>false</failOnMissingPlugin>
              <failOnSeedCollision>false</failOnSeedCollision>
              <unstableOnDeprecation>false</unstableOnDeprecation>
              <removedJobAction>IGNORE</removedJobAction>
              <removedViewAction>IGNORE</removedViewAction>
              <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
              <lookupStrategy>JENKINS_ROOT</lookupStrategy>
            </javaposse.jobdsl.plugin.ExecuteDslScripts>
          </builders>
          <publishers/>
          <buildWrappers/>
        </project>

  - name: Make an organizatio folder job groovy
    ansible.builtin.copy:
      dest: "{{ dir }}/jenkins/data/workspace/seed/gitea_org.groovy"
      content: |
        organizationFolder('gitea-folder') {
          displayName('Gitea Folder')
          organizations {
            gitea {
              repoOwner('jenkins-automation')
              serverUrl("https://{{ gitea['external'] }}")
              credentialsId('gitea-credentials')
              traits {
                giteaBranchDiscovery {
                  strategyId(0)
                }
                giteaPullRequestDiscovery {
                  strategyId(0)
                }
                giteaForkDiscovery {
                  strategyId(0)
                  trust {
                    giteaTrustContributors()
                  }
                }
              }
            }
          }
          triggers {
            periodicFolderTrigger {
              interval('1d')
            }
          }
        }

  - name: Create jenkins seed job
    ansible.builtin.shell: |
      pw=$(cat {{ dir }}/jenkins/data/secrets/initialAdminPassword)
      docker exec jenkins sh -c "cat /var/jenkins_home/workspace/seed/config.xml | java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 -auth admin:$pw create-job seed"

  - vars: 
      title: "Build the jenkins seed job"
      path: "/job/seed/build?token=init-token" 
      code: 201
    ansible.builtin.import_tasks: wait-jenkins.yaml

  - vars: 
      title: "Scan gitea"
      path: "/job/gitea-folder/build?delay=0 -X POST"
      code: 302
    ansible.builtin.import_tasks: wait-jenkins.yaml

  - name: Set default security setting by removing initial configuration file
    ansible.builtin.file:
      path: "{{ dir }}/jenkins/data/casc_configs/init/security.yaml"
      state: absent

  - name: Remove initial configurations by renaming
    ansible.builtin.shell: |
      rm -rf {{ dir }}/jenkins/data/casc_configs/.init
      mv {{ dir }}/jenkins/data/casc_configs/init {{ dir }}/jenkins/data/casc_configs/.init

  - name: Mark jenkins is fully configured, so insecure options will be removed on next running
    ansible.builtin.shell: echo "ready" > {{ dir }}/jenkins/data/state

  - name: Restart jenkins
    ansible.builtin.shell: docker compose -f {{ dir }}/docker-compose.yaml restart

