---
# Run private registry
- hosts: node0
  gather_facts: yes
  vars_files:
  - vars.yaml
  tasks:
  - name: Check registry image
    ansible.builtin.shell: docker image ls | grep registry
    register: ls_registry
    failed_when: ls_registry['rc'] == 2

  - name: Pull registry image
    ansible.builtin.shell: docker image pull registry
    when: ls_registry['stdout'].find("registry") == -1
  
  - name: Create .registry directories
    ansible.builtin.file:
      path: "{{ item }}"
      state: directory
    loop:
    - ~/.registry/data
    - ~/.registry/certs
    - ~/.registry/auth

  - name: Check cert.key and cert.crt
    ansible.builtin.find:
      paths: ~/.registry/certs
      patterns: 'cert.key,cert.crt'
    register: certfiles

  - name: Create cert.key
    ansible.builtin.shell: openssl genrsa -out ~/.registry/certs/cert.key 2048
    when: certfiles['matched'] != 2

  - name: Create cert.csr
    ansible.builtin.shell: openssl req -new -key ~/.registry/certs/cert.key -out ~/.registry/certs/cert.csr -subj "/C=KR/O=Organization/CN={{ registry['domain'] }}"
    when: certfiles['matched'] != 2

  - name: Create cert.ext
    ansible.builtin.blockinfile:
      path: ~/.registry/certs/cert.ext
      create: yes
      block: |
        [default]
        subjectAltName = \
          IP:{{ hostvars['node0']['ansible_host'] }}, \
          DNS:{{ registry['domain']
    when: certfiles.matched != 2

  - name: Create cert.crt
    ansible.builtin.shell: openssl x509 -req -days 36500 -in ~/.registry/certs/cert.csr -signkey ~/.registry/certs/cert.key -extfile ~/.registry/certs/cert.ext -out ~/.registry/certs/cert.crt
    when: certfiles.matched != 2

  - name: Create docker-compose.yaml
    ansible.builtin.blockinfile:
      path: ~/.registry/docker-compose.yaml
      create: yes
      block: |
        registry:
          container_name: registry
          restart: always
          image: registry
          ports:
          - {{ registry['port'] }}:5000
          environment:
            REGISTRY_STORAGE_DELETE_ENABLED: "true"
            REGISTRY_HTTP_TLS_CERTIFICATE: /certs/cert.crt
            REGISTRY_HTTP_TLS_KEY: /certs/cert.key
            #REGISTRY_AUTH: htpasswd
            #REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
            #REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
          volumes:
          - ~/.registry/data:/var/lib/registry
          - ~/.registry/certs:/certs
          #- ~/.registry/auth:/auth

  - name: Copy cert into the cert directory
    become: yes
    ansible.builtin.copy:
      remote_src: yes
      src: "{{ ansible_env.HOME }}/.registry/certs/cert.crt"
      dest: "/etc/docker/certs.d/{{ registry['url'] }}/"

  - name: Run registry
    ansible.builtin.shell: docker-compose -f ~/.registry/docker-compose.yaml up -d

# Copy crt into containerd path
- hosts: nodes
  gather_facts: yes
  vars_files:
  - vars.yaml
  tasks:

  - name: Copy temporary crt
    ansible.posix.synchronize:
      src: "/etc/docker/certs.d/{{ registry['url'] }}/cert.crt"
      dest: "{{ ansible_env.HOME }}/cert.crt"
    delegate_to: node0

  - name: "Copy crt to /etc/containerd/certs.d/{{ registry['url'] }}/"
    become: yes
    ansible.builtin.copy:
      remote_src: yes
      src: "{{ ansible_env.HOME }}/cert.crt"
      dest: "/etc/containerd/certs.d/{{ registry['url'] }}/"
   
  - name: Remove temporary crt
    ansible.builtin.file:
      path: "{{ ansible_env.HOME }}/cert.crt"
      state: absent

# Set containerd
- hosts: nodes
  gather_facts: no
  vars_files:
  - vars.yaml
  tasks:

  - name: Append registry in /etc/hosts
    become: yes
    ansible.builtin.blockinfile:
      path: /etc/hosts
      block: |
        {{ hostvars['node0']['ansible_host'] }} {{ registry['domain'] }}

  - name: Check containerd sandbox repo
    ansible.builtin.shell: cat /etc/containerd/config.toml | grep "sandbox_image = \"{{ registry['url'] }}/"
    register: grep_sandbox
    failed_when: grep_sandbox['rc'] == 2

  - name: Set containerd sandbox repo
    become: yes 
    ansible.builtin.shell: sed -i "s/sandbox_image = \"/sandbox_image = \"{{ registry['url'] }}\//" /etc/containerd/config.toml
    when: grep_sandbox['rc'] == 1

  - name: Check containerd config path
    ansible.builtin.shell: cat /etc/containerd/config.toml | grep 'config_path = "/etc/containerd/certs.d'
    register: grep_config
    failed_when: grep_config['rc'] == 2

  - name: Set config path in containerd config.toml
    become: yes
    ansible.builtin.shell: sed -i 's/config_path = "/config_path = "\/etc\/containerd\/certs.d/' /etc/containerd/config.toml
    when: grep_config['rc'] == 1

  - name: "Create /etc/containerd/certs.d/{{ registry['url'] }}/hosts.toml"
    become: yes
    ansible.builtin.blockinfile:
      path: "/etc/containerd/certs.d/{{ registry['url'] }}/hosts.toml"
      create: yes
      block: |
        server = "https://{{ registry['url'] }}"

        [host."https://{{ registry['url'] }}"]
          ca = "/etc/containerd/certs.d/{{ registry['url'] }}/cert.crt"

  - name: Restart containerd
    become: yes
    ansible.builtin.shell: systemctl restart containerd

